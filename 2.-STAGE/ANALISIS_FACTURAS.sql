USE STAGE;

SELECT COUNT(*) TOTAL_REGISTROS
,SUM(CASE WHEN LENGTH(BILL_REF_NO)!=0 THEN 1 ELSE 0 END) TOTAL_BILL_REF_NO
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(BILL_REF_NO))!=0 THEN BILL_REF_NO ELSE 0 END) TOTAL_DISTINTOS_BILL_REF_NO
,SUM(CASE WHEN LENGTH(CUSTOMER_ID)!=0 THEN 1 ELSE 0 END) TOTAL_CUSTOMER_ID
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(CUSTOMER_ID))!=0 THEN CUSTOMER_ID ELSE 0 END) TOTAL_DISTINTOS_CUSTOMER_ID
,SUM(CASE WHEN LENGTH(START_DATE)!=0 THEN 1 ELSE 0 END) TOTAL_START_DATE
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(START_DATE))!=0 THEN START_DATE ELSE 0 END) TOTAL_DISTINTOS_START_DATE
,SUM(CASE WHEN LENGTH(END_DATE)!=0 THEN 1 ELSE 0 END) TOTAL_END_DATE
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(END_DATE))!=0 THEN END_DATE ELSE 0 END) TOTAL_DISTINTOS_END_DATE
,SUM(CASE WHEN LENGTH(STATEMENT_DATE)!=0 THEN 1 ELSE 0 END) TOTAL_STATEMENT_DATE
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(STATEMENT_DATE))!=0 THEN STATEMENT_DATE ELSE 0 END) TOTAL_DISTINTOS_STATEMENT_DATE
,SUM(CASE WHEN LENGTH(PAYMENT_DATE)!=0 THEN 1 ELSE 0 END) TOTAL_PAYMENT_DATE
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(PAYMENT_DATE))!=0 THEN PAYMENT_DATE ELSE 0 END) TOTAL_DISTINTOS_PAYMENT_DATE
,SUM(CASE WHEN LENGTH(BILL_CYCLE)!=0 THEN 1 ELSE 0 END) TOTAL_BILL_CYCLE
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(BILL_CYCLE))!=0 THEN BILL_CYCLE ELSE 0 END) TOTAL_DISTINTOS_BILL_CYCLE
,SUM(CASE WHEN LENGTH(AMOUNT)!=0 THEN 1 ELSE 0 END) TOTAL_AMOUNT
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(AMOUNT))!=0 THEN AMOUNT ELSE 0 END) TOTAL_DISTINTOS_AMOUNT
,SUM(CASE WHEN LENGTH(BILL_METHOD)!=0 THEN 1 ELSE 0 END) TOTAL_BILL_METHOD
,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(BILL_METHOD))!=0 THEN BILL_METHOD ELSE 0 END) TOTAL_DISTINTOS_BILL_METHOD
FROM STAGE.STG_FACTURAS_FCT;

/*-------------------------- BILL_REF_NO --------------------------------*/

# MIRMOS SI HAY ALGUNO QUE NO PODAMOS PASARLO A NUMERO POSITIVO
SELECT DISTINCT REPLACE(BILL_REF_NO,' ','') AS REFERENCIAS_MAL_FOMADOS
FROM STAGE.STG_FACTURAS_FCT
WHERE REPLACE(BILL_REF_NO,' ','') NOT REGEXP '^(\\+){0,1}([0-9]+)$'
  AND LENGTH(TRIM(BILL_REF_NO)) != 0;
  
# NO DEVUELVE NADA, CON LO QUE NO TENEMOS REFERENCIAS MAL FORMADAS
  
/*-----------------------------------------------------------------------*/

/*-------------------------- CUSTOMER_ID --------------------------------*/
# MIRMOS SI HAY ALGUNO QUE NO PODAMOS PASARLO A NUMERO POSITIVO
SELECT DISTINCT REPLACE(CUSTOMER_ID,' ','') AS REFERENCIAS_MAL_FOMADOS
FROM STAGE.STG_FACTURAS_FCT
WHERE REPLACE(CUSTOMER_ID,' ','') NOT REGEXP '^(\\+){0,1}([0-9]+)$'
  AND LENGTH(TRIM(CUSTOMER_ID)) != 0;
  
# NO DEVUELVE NADA, CON LO QUE NO TENEMOS CUSTOMER_ID MAL FORMADOS

# COMPROBAMOS SI YA TENEMOS LOS CLIENTES EN ODS
SELECT COUNT(*) #FCT.BILL_REF_NO, CLI.ID_CLIENTE
FROM STAGE.STG_FACTURAS_FCT FCT
INNER JOIN ODS.ods_hc_clientes CLI ON FCT.CUSTOMER_ID = CLI.ID_CLIENTE;
/*371160
420000 - 371160 = 48840 QUE NO TENEMOS EL CLIENTE EN ODS
*/
/*-----------------------------------------------------------------------*/

/*-------------------------- START_DATE --------------------------------*/
SELECT LENGTH(TRIM(START_DATE)), COUNT(*)
FROM STAGE.STG_FACTURAS_FCT
GROUP BY LENGTH(TRIM(START_DATE));
/*
10, 399000
19, 21000
TENEMOS DISTINTOS FORMATOS DE FECHA
*/


SELECT START_DATE
FROM STAGE.STG_FACTURAS_FCT
WHERE LENGTH(TRIM(START_DATE)) = 10;
/*
# START_DATE
2016-02-15
2016-02-01
2016-02-15
2016-02-15
2016-02-01
...
*/

SELECT START_DATE
FROM STAGE.STG_FACTURAS_FCT
WHERE LENGTH(TRIM(START_DATE)) = 19;
/*
# START_DATE
2016-01-01 00:00:00
2016-01-15 00:00:00
2016-01-01 00:00:00
2016-01-01 00:00:00
2016-01-01 00:00:00
2016-01-01 00:00:00
...
*/
# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT START_DATE 
FROM STAGE.STG_FACTURAS_FCT
WHERE START_DATE NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9])){0,1}$'
  AND LENGTH(TRIM(START_DATE))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO

/*-----------------------------------------------------------------------*/

/*-------------------------- END_DATE --------------------------------*/
SELECT LENGTH(TRIM(END_DATE)), COUNT(*)
FROM STAGE.stg_facturas_fct
GROUP BY LENGTH(TRIM(END_DATE));
/*
10, 420000

TODAS TIENEN LA MISMA LONGITUD DE FECHA
*/

# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT END_DATE 
FROM STAGE.STG_FACTURAS_FCT
WHERE END_DATE NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9])){0,1}$'
  AND LENGTH(TRIM(END_DATE))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO

/*-----------------------------------------------------------------------*/

/*-------------------------- STATEMENT_DATE --------------------------------*/
SELECT LENGTH(TRIM(STATEMENT_DATE)), COUNT(*)
FROM STAGE.stg_facturas_fct
GROUP BY LENGTH(TRIM(STATEMENT_DATE));
/*
10, 399000
19, 21000

TENEMOS DISTINTOS FORMATOS DE FECHA
*/

# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT STATEMENT_DATE 
FROM STAGE.STG_FACTURAS_FCT
WHERE STATEMENT_DATE NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9])){0,1}$'
  AND LENGTH(TRIM(STATEMENT_DATE))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO
/*-----------------------------------------------------------------------*/

/*-------------------------- PAYMENT_DATE --------------------------------*/
SELECT LENGTH(PAYMENT_DATE), COUNT(*)
FROM STAGE.stg_facturas_fct
GROUP BY LENGTH(PAYMENT_DATE);
/*
10, 399000
19, 21000

TENEMOS DISTINTOS FORMATOS DE FECHA
*/

# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT PAYMENT_DATE 
FROM STAGE.STG_FACTURAS_FCT
WHERE PAYMENT_DATE NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9])){0,1}$'
  AND LENGTH(TRIM(PAYMENT_DATE))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO
/*-----------------------------------------------------------------------*/


/*-------------------------- BILL_CYCLE --------------------------------*/
SELECT BILL_CYCLE, COUNT(*)
FROM STAGE.stg_facturas_fct
GROUP BY BILL_CYCLE;
/*
M01, 209574
M15, 210426

TODAS LAS FACTURAS TIENEN CICLO DE FACTURACIÓN, 
PERO SOLO HAY DOS CICLOS DISTINTOS POR LO QUE 
SE CREARÁ EL DOMINIO ODS_DM_CICLOS_FACTURACION
*/
/*-----------------------------------------------------------------------*/


/*-------------------------- BILL_METHOD --------------------------------*/
SELECT BILL_METHOD, COUNT(*)
FROM STAGE.stg_facturas_fct
GROUP BY BILL_METHOD;
/*
Check payment, 420
Credit Card, 84303
Direct debit, 335277


TODAS LAS FACTURAS TIENEN METODO DE PAGO, 
PERO SOLO HAY TRES METODOS DISTINTOS POR LO QUE 
SE CREARÁ EL DOMINIO ODS_DM_METODOS_PAGO
*/
/*-----------------------------------------------------------------------*/

/*-------------------------- AMOUNT --------------------------------*/
SELECT MIN(CAST(AMOUNT AS DECIMAL(10,3))) MENOR_VALOR,
	   MAX(CAST(AMOUNT AS DECIMAL(10,3))) MAYOR_VALOR
FROM STAGE.STG_FACTURAS_FCT;
/*
# MENOR_VALOR, MAYOR_VALOR
		6.760, 81.520


NO HA DADO ERROR, POR LO QUE SUPONEMOS QUE TODOS LOS NUMEROS SON VALIDOS
POR OTRO LADO, AUN QUE TODOS LOS VALORES QUE HAY AHORA MISMO SON
POSITIVOS [6.76,81.52], DEFINIREMOS EL CAMPO COMO FLOAT
*/

