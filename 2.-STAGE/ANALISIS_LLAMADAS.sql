USE STAGE;

SELECT COUNT(*) TOTAL_REGISTROS 
,SUM(CASE WHEN LENGTH(ID)!=0 THEN 1 ELSE 0 END) TOTAL_ID,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(ID))!=0 THEN ID ELSE 0 END) TOTAL_DISTINTOS_ID
,SUM(CASE WHEN LENGTH(PHONE_NUMBER)!=0 THEN 1 ELSE 0 END) TOTAL_PHONE_NUMBER,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(PHONE_NUMBER))!=0 THEN PHONE_NUMBER ELSE 0 END) TOTAL_DISTINTOS_PHONE_NUMBER
,SUM(CASE WHEN LENGTH(START_DATETIME)!=0 THEN 1 ELSE 0 END) TOTAL_START_DATETIME,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(START_DATETIME))!=0 THEN START_DATETIME ELSE 0 END) TOTAL_DISTINTOS_START_DATETIME
,SUM(CASE WHEN LENGTH(END_DATETIME)!=0 THEN 1 ELSE 0 END) TOTAL_END_DATETIME,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(END_DATETIME))!=0 THEN END_DATETIME ELSE 0 END) TOTAL_DISTINTOS_END_DATETIME
,SUM(CASE WHEN LENGTH(SERVICE)!=0 THEN 1 ELSE 0 END) TOTAL_SERVICE,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(SERVICE))!=0 THEN SERVICE ELSE 0 END) TOTAL_DISTINTOS_SERVICE
,SUM(CASE WHEN LENGTH(FLG_TRANSFER)!=0 THEN 1 ELSE 0 END) TOTAL_FLG_TRANSFER,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(FLG_TRANSFER))!=0 THEN FLG_TRANSFER ELSE 0 END) TOTAL_DISTINTOS_FLG_TRANSFER
,SUM(CASE WHEN LENGTH(AGENT)!=0 THEN 1 ELSE 0 END) TOTAL_AGENT,COUNT(DISTINCT CASE WHEN LENGTH(TRIM(AGENT))!=0 THEN AGENT ELSE 0 END) TOTAL_DISTINTOS_AGENT
FROM STAGE.STG_CONTACTOS_IVR;

/*-------------------------- ID --------------------------------*/
# SABEMOS QUE SE REPITEN MUCHOS ID's, VEAMOS SI HAY ALGÚN PATRÓN
SELECT ID,COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY ID 
ORDER BY 2 DESC;

/*
99672	4
99812	4
99892	4
85116	4
85165	4
85246	4
8553	4
...

LOS IDENTIFICADORE SE AGRUPAN COMO MÁXIMO DE 4 EN 4
*/
SELECT *
FROM STAGE.STG_CONTACTOS_IVR
WHERE ID IN ('99672','99812','99892','85116','85165','85246','8553')
ORDER BY ID;
/*
# ID, PHONE_NUMBER, START_DATETIME, 			END_DATETIME, 				SERVICE, 	FLG_TRANSFER, AGENT
85116, 2022166026, 2017-10-22 10:10:42.980343, 2017-10-22 10:12:40.980343, COLLECTIONS, 		True, emilymckenzie
85116, 3234334099, 2017-10-22 10:12:40.980343, 2017-10-22 10:16:50.980343, CLAIMS, 				True, mjones
85116,           , 2017-10-22 10:16:50.980343, 2017-10-22 10:19:34.980343, CLAIMS, 				True, pbailey
85116, 6172682422, 2017-10-22 10:19:34.980343, 2017-10-22 10:26:08.980343, CLAIMS, 				False, apriltaylor
85165, 8016815697, 2017-10-22 10:41:00.980343, 2017-10-22 10:45:35.980343, SALES, 				True, james39
85165, 2394112276, 2017-10-22 10:45:35.980343, 2017-10-22 10:49:44.980343, CUSTOMER SERVICE, 	True, chambersjessica
85165, 6013106280, 2017-10-22 10:49:44.980343, 2017-10-22 10:59:23.980343, CUSTOMER SERVICE, 	True, ashleywood
85165, 3125639841, 2017-10-22 10:59:23.980343, 2017-10-22 11:03:40.980343, SALES, 				False, tammy65
*/

# MIRMOS SI HAY ALGUNO QUE NO PODAMOS PASARLO A NUMERO POSITIVO
SELECT DISTINCT REPLACE(ID,' ','') AS IDS_MAL_FOMADOS
FROM STAGE.STG_CONTACTOS_IVR
WHERE REPLACE(ID,' ','') NOT REGEXP '^(\\+){0,1}([0-9]+)$'
  AND LENGTH(TRIM(ID)) != 0;

# NO DEVUELVE NINGUNO, POR LO QUE NO HABRÁ PROBLEMAS EN CARGARLOS
/*-----------------------------------------------------------------------*/

/*--------------------- PHONE_NUMBER ------------------------------------*/
# MIRMOS SI HAY ALGUNO QUE NO PODAMOS PASARLO A NUMERO POSITIVO
SELECT DISTINCT REPLACE(PHONE_NUMBER,' ','') AS TELEFONOS_MAL_FOMADOS
FROM STAGE.STG_CONTACTOS_IVR
WHERE REPLACE(PHONE_NUMBER,' ','') NOT REGEXP '^(\\+){0,1}([0-9]+)$'
  AND LENGTH(TRIM(PHONE_NUMBER)) != 0;
  
# NO DEVUELVE NADA, CON LO QUE NO TENEMOS TELÉFONOS MAL FORMADOS

#LA TABLA ODS_HC_CLIENTES TAMBIEN TIENE UN CAMPO PARA EL TELÉFONO
# POR LO QUE PODRIA SER UN BUEN PUNTO PARA SABER CUAL ES EL CLIENTE
# DE LA LLAMADA
SELECT CLI.NOMBRE_CLIENTE,CON.PHONE_NUMBER
  FROM STAGE.STG_CONTACTOS_IVR CON
	INNER JOIN ODS.ODS_HC_CLIENTES CLI ON 
		CAST(CON.PHONE_NUMBER AS UNSIGNED INT)= CLI.TELEFONO_CLIENTE;
# NO NOS SALE NINGUN RESULTADO POR LO QUE CONCLUIMOS QUE LOS TELÉFONOS
# DE LAS LLAMADAS NO SON DE NINGUN CLIENTE QUE TENGAMOS REGISTRADO    
    
/*-----------------------------------------------------------------------*/

/*---------------------  SERVICE ---------------------------------------*/
SELECT TRIM(UPPER(SERVICE)) DEPARTAMENTO, COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY TRIM(UPPER(SERVICE));
/*
DEPARTAMENTO	, COUNT(*)
				, 215
CLAIMS			, 30403
COLLECTIONS		, 9937
CUSTOMER SERVICE, 50715
FINANCIALS		, 10289
SALES			, 80925
SUPPORT			, 20233
*/

# SOLO HAY 6 DEPARTAMENTOS DISTINTOS, POR LO QUE CREAMOS EL 
# DOMINIO EN LA TABLA ODS_DM_DEPARTAMENTOS 
# SUPONDREMOS LOS 215 NULOS COMO DEPARTAMENTO DESCONOCIDO
/*-----------------------------------------------------------------------*/

/*---------------------  FLG_TRANSFER -----------------------------------*/

SELECT UPPER(TRIM(FLG_TRANSFER)) TRANSFERIDO, COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY UPPER(TRIM(FLG_TRANSFER));
/*
TRANSFERIDO	, COUNT(*)
	FALSE	, 149960
	TRUE	, 52757

SOLO TENEMOS DOS POSIBLES VALORES QUE SUMAN EL TOTAL DE REGISTROS (NO HAY NULOS)    
*/
/*-----------------------------------------------------------------------*/

/*-------------------------- AGENT --------------------------------*/
# VEMOS LAS REPETICIONES DE CADA AGENTE
SELECT TRIM(AGENT) AGENTE, COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY TRIM(AGENT)
ORDER BY 2 DESC;
/*
# AGENTE		, COUNT(*)
				, 7978
carterdavid		, 1033
davidkline		, 867
browninglisa	, 857
james39			, 841
tayloradams		, 839
taylormatthews	, 836
scottmurphy		, 834
hmeyers			, 828
...
*/
/*-----------------------------------------------------------------------*/

/*---------------------  START_DATETIME ---------------------------------------*/
SELECT LENGTH(START_DATETIME), COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY LENGTH(START_DATETIME); 
/*
 LENGTH(START_DATETIME), COUNT(*)
					26 , 202717
NO HAY NULOS Y TODOS TIENEN LA MISMA LONGITUD
*/

# VEAMOS EL FORMATO
SELECT START_DATETIME
FROM STAGE.STG_CONTACTOS_IVR;
/*
# START_DATETIME
2017-09-15 11:47:22.980343
2017-09-15 11:48:16.980343
2017-09-15 11:49:05.980343
2017-09-15 11:49:40.980343
2017-09-15 11:50:38.980343
2017-09-15 11:56:26.980343
2017-09-15 11:51:11.980343
...
*/
# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT START_DATETIME 
FROM STAGE.STG_CONTACTOS_IVR
WHERE START_DATETIME NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9]\\.[0-9]+))$'
  AND LENGTH(TRIM(START_DATETIME))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO
/*---------------------------------------------------------------------------*/
  
/*---------------------  END_DATETIME ---------------------------------------*/
SELECT LENGTH(END_DATETIME), COUNT(*)
FROM STAGE.STG_CONTACTOS_IVR
GROUP BY LENGTH(END_DATETIME);
/*
LENGTH(END_DATETIME), COUNT(*)
				   0, 16182
				  26, 186535

TENEMOS NULOS. Y EL QUE PODRIA SER UN UNICO FORMATO DE FECHA
*/
# VEAMOS EL FORMATO
SELECT END_DATETIME
FROM STAGE.STG_CONTACTOS_IVR;
/*
# END_DATETIME
2017-09-15 11:49:19.980343
2017-09-15 11:54:01.980343
2017-09-15 11:56:44.980343
2017-09-15 11:52:07.980343
2017-09-15 11:56:26.980343
2017-09-15 12:05:51.980343
2017-09-15 11:56:33.980343
*/

# COMPROBEMOS EL FORMATO PARA PODER PASARLO A DATETIME
SELECT END_DATETIME 
FROM STAGE.STG_CONTACTOS_IVR
WHERE END_DATETIME NOT RLIKE '^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(( [0-2][0-9]):([0-5][0-9]):([0-5][0-9]\\.[0-9]+))$'
  AND LENGTH(TRIM(END_DATETIME))!=0;
# NO DEVUELVE NADA, POR TANTO TODOS CUMPLEN EL FORMATO  
/*-----------------------------------------------------------------------*/
